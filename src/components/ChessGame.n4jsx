import {Board} from "components/Board";
// import {Popup} from "components/Popup";
import {connect} from "@n4jsd/react-redux";
import {Coordinate} from "Coordinate";
import {createJumpToStepAction} from "actions/JumpToStepAction";
import {createPickSquareAction} from "actions/PickSquareAction";
import {GameInfo} from "components/GameInfo";
import {GameRules} from "GameRules";
import {Move} from "Move";
import {Piece} from "Piece";
import * as React from "react";
import {ReduxAction} from "@n4jsd/redux";
import {Snapshot} from "store/StoreState";
import {StoreState} from "store/StoreState";

/* Chess Game component's props */
export public interface ~ChessGameProps extends React.ComponentProps {
 	public history: Array<Snapshot>;
    public stepNumber: int;
    public whiteIsNext: boolean;
    public pickedSquare: Coordinate;
    public possibleMoves: Array<Coordinate>;
    public capturedPieces: Array<Array<Piece>>;
    public createPickSquareAction?: {function(Coordinate):void};
    public jumpToStep?: {function(int):void}
}

/* Chess Game React component (root) */
export default public class ChessGame extends React.Component<ChessGameProps, Object> {

  private pickSquare(pos: Coordinate) {
    this.props.createPickSquareAction(pos)

    // temp variables for game rules methods
    // copy history
    const newHistory = this.props.history.slice(0, this.props.stepNumber + 1);
    const currentSnapshot = newHistory[newHistory.length - 1];
    // copy squares
    const currentSquares: Array<Array<Piece>> = currentSnapshot.squares.map((row) => row.slice());
    const piece = currentSquares[this.props.pickedSquare.row][this.props.pickedSquare.col];
    const fromPos = this.props.pickedSquare;
    const attemptedMove = new Move({piece: piece, fromPos: fromPos, toPos: pos});

    if (!GameRules.isValidMove(currentSnapshot, attemptedMove)) {
      // invalid move
      // popup
      console.log('invalid move');
    } else if (GameRules.calculateWinner(currentSnapshot, this.props.whiteIsNext)) {
      // checkmate!
      // popup to announce  Winner
      // restart game on popup quit
      console.log('checkmate');
    }
  }

  @Override
  public componentDidMount() {
      document.body.style.backgroundColor = "lightgrey"
  }

  @Override
  public render(): React.Element<?> {
    const {history, jumpToStep, whiteIsNext, stepNumber} = this.props;

    const currentSnapshot = history[stepNumber];
	const winner = GameRules.calculateWinner(currentSnapshot, whiteIsNext);
    const moves = history.map((snapshot, step) => {
      const actionLabel = step ? 'Go to move #' + step : 'Go to start of game.';

      const tableCellStyles = {
          textAlign: 'left',
          verticalAlign: 'middle',
          border: '1px solid black',
          position: 'relative',
          fontFamily: 'Arial Unicode MS'
      };

      const actionCellStyles = {
        backgroundColor: 'green',
        textAlign: 'left',
        verticalAlign: 'middle',
        border: '1px solid black',
        position: 'relative',
        fontFamily: 'Arial Unicode MS',
      };

      const actionButtonStyles = {
        backgroundColor: 'green',
        border: 'none',
        color: 'black',
        padding: '4px',
        width: '100%',
        textAlign: 'center',
        textDecoration: 'none',
      };

      return (
          <React.Fragment>
              <tr>
                <td style={tableCellStyles}>{step ? step : ''}</td>
                <td style={tableCellStyles}>{snapshot.lastMoves.join(',')}</td>
                <td style={actionCellStyles}>
                  <button style={actionButtonStyles} onClick={() => jumpToStep(step)}>{actionLabel}</button>
                </td>
              </tr>
          </React.Fragment>
      );

    });

    let status;
    if (winner) {
      status = "Winner: " + winner;
    } else {
      status = "Next player: " + (whiteIsNext ? "White" : "Black");
    }

    const headerStyles = {
      padding: '10px',
      paddingLeft: '41vw',
      paddingRight: '0px',
      backgroundColor: 'lightgrey',
      font: '18vw',
    }

    const appStyles = {
      display: 'flex',
      flexDirection: 'column',
    }
    const gameStyles = {
        display: 'flex',
        flexDirection: 'row'
    }

    /* Game board styles */
    const gameboardStyles = {
        width: '45vw',
        height: '45vw'
    }

    return (
        <div style={appStyles}>
          <div style={headerStyles}>
              {"TWO PLAYER CHESS"}
          </div>
          <div style={gameStyles}>
               <div style={gameboardStyles}>
                  <Board
                      squares={currentSnapshot.squares}
                      pickedSquare={this.props.pickedSquare}
                      possibleMoves={this.props.possibleMoves}
                      onClick={(pos: Coordinate) => { this.pickSquare(pos); }}
                      isPlayWithHelp={true}
                    />
               </div>

                <GameInfo
                    capturedPieces={this.props.capturedPieces}
                    whiteIsNext={whiteIsNext}
                    moves={moves}
                />
          </div>
        </div>
    );
  }
}

/**
 * Map Redux state to Chess Game's props
 */
function mapStateToProps(state: StoreState): ChessGameProps {
	return {
		history: state.history,
    	stepNumber: state.stepNumber,
    	whiteIsNext: state.whiteIsNext,
    	pickedSquare: state.pickedSquare,
    	possibleMoves: state.possibleMoves,
      capturedPieces: state.capturedPieces
 	}
}

/**
 * Map Chess Game's events to Redux actions
 */
function mapDispatchToProps(dispatch: {function(ReduxAction): any} ) {
	return {
		createPickSquareAction: (pos: Coordinate) => {
			dispatch(createPickSquareAction(pos))
		},
		jumpToStep: (step: number) => {
			dispatch(createJumpToStepAction(step))
		}
	}
 }

export public const ConnectedChessGame = connect(mapStateToProps, mapDispatchToProps)(ChessGame);
