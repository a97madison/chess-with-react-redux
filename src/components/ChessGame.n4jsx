import {Board} from "components/Board";
import {GameInfo} from "components/GameInfo";
import {Popup} from "components/Popup";
import {connect} from "@n4jsd/react-redux";
import {Coordinate} from "Coordinate";
import {createJumpToStepAction} from "actions/JumpToStepAction";
import {createPickSquareAction} from "actions/PickSquareAction";
import {createToggleInvalidVisibilityAction} from "actions/ToggleInvalidVisibilityAction";
import {createToggleCheckmateVisibilityAction} from "actions/ToggleCheckmateVisibilityAction";
import {GameRules} from "GameRules";
import {Move} from "Move";
import {Piece} from "Piece";
import * as React from "react";
import {ReduxAction} from "@n4jsd/redux";
import {Snapshot} from "store/StoreState";
import {StoreState} from "store/StoreState";

/* Chess Game component's props */
export public interface ~ChessGameProps extends React.ComponentProps {
 	public history: Array<Snapshot>;
    public stepNumber: int;
    public whiteIsNext: boolean;
    public pickedSquare: Coordinate;
    public possibleMoves: Array<Coordinate>;
    public capturedPieces: Array<Array<Piece>>;
    public isInvalidVisible: boolean;
    public isCheckmateVisible: boolean;
    public createPickSquareAction?: {function(Coordinate):void};
    public jumpToStep?: {function(int):void};
    public toggleInvalidVisibility?: {function(boolean):void};
    public toggleCheckmateVisibility?: {function(boolean):void};
}

/* Chess Game React component (root) */
export default public class ChessGame extends React.Component<ChessGameProps, Object> {

  private pickSquare(pos: Coordinate) {
    this.props.createPickSquareAction(pos)

    const {history, pickedSquare, stepNumber, toggleInvalidVisibility} = this.props;
    // temp variables for game rules methods
    // copy history
    const newHistory = history.slice(0, stepNumber + 1);
    const currentSnapshot = newHistory[newHistory.length - 1];
    // copy squares
    const currentSquares: Array<Array<Piece>> = currentSnapshot.squares.map((row) => row.slice());

    if (this.props.pickedSquare != null) {
      const piece = currentSquares[pickedSquare.row][pickedSquare.col];
      const newPiece = currentSquares[pos.row][pos.col];
      const fromPos = pickedSquare;
      const attemptedMove = new Move({piece: piece, fromPos: fromPos, toPos: pos});

      if (!GameRules.isValidMove(currentSnapshot, attemptedMove) && newPiece == null) {
        // invalid move. popup
        toggleInvalidVisibility(true);
      }
    }
  }

  private hideInvalidVisibility() {
    this.props.toggleInvalidVisibility(false);
  }

  private hideCheckmateVisibility() {
    this.props.toggleCheckmateVisibility(false);
    // refresh page / restart app
    window.location.reload(false);
  }

  @Override
  public componentDidMount() {
      document.body.style.backgroundColor = "lightgrey"
  }

  @Override
  public render(): React.Element<?> {
    const {history, jumpToStep, whiteIsNext, stepNumber} = this.props;

    const currentSnapshot = history[stepNumber];
    const moves: Array<React.Element<?>> = history.map((snapshot, step) => {
      const actionLabel = step ? 'Go to move #' + step : 'Go to start of game.';

      const tableCellStyles = {
          textAlign: 'center',
          verticalAlign: 'middle',
          border: '1px solid black',
          position: 'relative',
          fontFamily: 'Arial Unicode MS'
      };

      const actionCellStyles = {
        backgroundColor: 'green',
        textAlign: 'left',
        verticalAlign: 'middle',
        border: '1px solid black',
        position: 'relative',
        fontFamily: 'Arial Unicode MS',
      };

      const actionButtonStyles = {
        backgroundColor: 'green',
        border: 'none',
        color: 'black',
        padding: '4px',
        width: '100%',
        textAlign: 'center',
        textDecoration: 'none',
      };

      return (
          <React.Fragment>
              <tr>
                <td style={tableCellStyles}>{step ? step : ''}</td>
                <td style={tableCellStyles}>{snapshot.lastMoves.join(',')}</td>
                <td style={actionCellStyles}>
                  <button style={actionButtonStyles} onClick={() => jumpToStep(step)}>{actionLabel}</button>
                </td>
              </tr>
          </React.Fragment>
      );

    });

    const headerStyles = {
      padding: '10px',
      paddingLeft: '41vw',
      paddingRight: '0px',
      backgroundColor: 'lightgrey',
      font: '18vw',
    }

    const appStyles = {
      display: 'flex',
      flexDirection: 'column',
    }
    const gameStyles = {
        display: 'flex',
        flexDirection: 'row'
    }

    /* Game board styles */
    const gameboardStyles = {
        width: '45vw',
        height: '45vw'
    }

    // label string constants
    const header = "TWO PLAYER CHESS";
    const invalid = "INVALID MOVE!";
    const checkmate = "CHECKMATE! " + (this.props.whiteIsNext ? "BLACK" : "WHITE") + " WINS!";

    return (
        <div style={appStyles}>
          <div style={headerStyles}>
              {header}
          </div>
          <div style={gameStyles}>
               <div style={gameboardStyles}>
                  <Board
                      squares={currentSnapshot.squares}
                      pickedSquare={this.props.pickedSquare}
                      possibleMoves={this.props.possibleMoves}
                      onClick={(pos: Coordinate) => { this.pickSquare(pos); }}
                      isPlayWithHelp={true}
                    />
               </div>

                <GameInfo
                    capturedPieces={this.props.capturedPieces}
                    whiteIsNext={whiteIsNext}
                    moves={moves}
                />
          </div>

          {this.props.isInvalidVisible ?
            <Popup
              text={invalid}
              toggle={() => { this.hideInvalidVisibility(); }}
            /> : null}

          {this.props.isCheckmateVisible ?
            <Popup
              text={checkmate}
              toggle={() => { this.hideCheckmateVisibility(); }}
            /> : null}

        </div>
    );
  }
}

/**
 * Map Redux state to Chess Game's props
 */
function mapStateToProps(state: StoreState): ChessGameProps {
	return {
		history: state.history,
    	stepNumber: state.stepNumber,
    	whiteIsNext: state.whiteIsNext,
    	pickedSquare: state.pickedSquare,
    	possibleMoves: state.possibleMoves,
      capturedPieces: state.capturedPieces,
      isInvalidVisible: state.isInvalidVisible,
      isCheckmateVisible: state.isCheckmateVisible
 	}
}

/**
 * Map Chess Game's events to Redux actions
 */
function mapDispatchToProps(dispatch: {function(ReduxAction): any} ) {
	return {
		createPickSquareAction: (pos: Coordinate) => {
			dispatch(createPickSquareAction(pos))
		},
		jumpToStep: (step: number) => {
			dispatch(createJumpToStepAction(step))
		},
    toggleInvalidVisibility: (isVisible: boolean) => {
      dispatch(createToggleInvalidVisibilityAction(isVisible))
    },
    toggleCheckmateVisibility: (isVisible: boolean) => {
      dispatch(createToggleCheckmateVisibilityAction(isVisible))
    }
	}
 }

export public const ConnectedChessGame = connect(mapStateToProps, mapDispatchToProps)(ChessGame);
