import {Coordinate} from "Coordinate";
import {Piece} from "Piece";
import {LabelSquare} from "components/CoordinateSquare";
import {Square} from "components/Square";
import * as React from "react";

/**
 * Board props
 */
export public interface ~BoardProps extends React.ComponentProps {
    public squares: Array<Array<Piece>>;
    public pickedSquare: Coordinate;
    public possibleMoves: Array<Coordinate>;
    public onClick: {function(Coordinate): void};
    public isPlayWithHelp: boolean;
}

/**
 * The board styles
 */
const boardStyles = {
	display: 'flex',
	flexWrap: 'wrap',
	width: '100%',
	height: '100%'
}

/**
 * Each board square occupies x% width and x% height
 */
const squareStyles = {
    width: '12%',
    height: '12%'
}

const sideSquareStyles = {
  width: '4%',
  height: '12%'
}

const topSquareStyles = {
  width: '12%',
  height: '4%'
}

const topCornerStyles = {
  width: '4%',
  height: '4%'
}

/**
 * Board React component
 */
export public class Board extends React.Component<BoardProps, Object> {
  /**
 * Render the i-th square on the board 0 <= i <= 63
 */
 private renderSquare(pos: Coordinate, isWhite: boolean, isPicked: boolean, isPossibleMove: boolean, piece: Piece): React.Element<?> {
     return (
       <div style={squareStyles}>
           <Square
               isWhite={isWhite}
               isPicked={isPicked}
               isPossibleMove={isPossibleMove}
               piece={piece}
               isPlayWithHelp={this.props.isPlayWithHelp}
               onClick={() => this.props.onClick(pos)}
             />
         </div>
     );
 }

 /**
 * Render top coordinate square
 */
 private renderTopCoordinateSquare(label: string): React.Element<?> {
     return (
       <div style={topSquareStyles}>
           <LabelSquare
             label={label}
           />
       </div>
     );
   }

 /**
 * Render side coordinate square
 */
 private renderSideCoordinateSquare(label: string): React.Element<?> {
     return (
       <div style={sideSquareStyles}>
           <LabelSquare
             label={label}
           />
       </div>
     );
   }

 /**
 * Render top corner square
 */
 private renderTopCornerSquare(): React.Element<?> {
       return (
         <div style={topCornerStyles}>
             <LabelSquare
               label={''}
             />
         </div>
       );
     }

  private renderSquares(): Array<React.Element<?>> {
   	 	const squares = new Array<React.Element<?>>();
   		let isWhiteInitial = true;
   	    // Draw row coordinates: a b c ... h
   	    squares.push(this.renderTopCornerSquare());
   	    for (let i = 0; i < 8; i++) {
   	    	squares.push(this.renderTopCoordinateSquare(String.fromCharCode('a'.charCodeAt(0) + i)));
   	    }

   	 	for (let row = 0; row < 8; row++) {
   	 	    // Draw column coordinate: 8 7 6 ... 1
   	 	    squares.push(this.renderSideCoordinateSquare((8-row).toString()));
   	 		let isWhite = isWhiteInitial;
   		 	for (let col = 0; col < 8; col++) {
   		 	    const pos = new Coordinate({row: row, col: col});
   		 	    const isPotentialDestination: boolean =
   		 	        this.props.possibleMoves.findIndex(potentialDest => potentialDest.equals(pos)) >= 0;
   		 		squares.push(this.renderSquare(pos, isWhite,
   		 		    this.props.pickedSquare && this.props.pickedSquare.equals(pos)? true : false,  isPotentialDestination, this.props.squares[pos.row][pos.col]
   		 		));
   		 		isWhite = !isWhite;
   		 	}
   		 	isWhiteInitial = !isWhiteInitial;
   		}
      return squares;
    }

	@Override
	public render(): React.Element<?> {
		return (
			<div style={boardStyles}>
				{ this.renderSquares() }
			</div>
		);
	}
}
